// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: proto/gossip.proto

package gossip

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GossipServiceClient is the client API for GossipService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GossipServiceClient interface {
	DiscussGossip(ctx context.Context, opts ...grpc.CallOption) (GossipService_DiscussGossipClient, error)
}

type gossipServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGossipServiceClient(cc grpc.ClientConnInterface) GossipServiceClient {
	return &gossipServiceClient{cc}
}

func (c *gossipServiceClient) DiscussGossip(ctx context.Context, opts ...grpc.CallOption) (GossipService_DiscussGossipClient, error) {
	stream, err := c.cc.NewStream(ctx, &GossipService_ServiceDesc.Streams[0], "/gossip.GossipService/DiscussGossip", opts...)
	if err != nil {
		return nil, err
	}
	x := &gossipServiceDiscussGossipClient{stream}
	return x, nil
}

type GossipService_DiscussGossipClient interface {
	Send(*Gossip) error
	Recv() (*Gossip, error)
	grpc.ClientStream
}

type gossipServiceDiscussGossipClient struct {
	grpc.ClientStream
}

func (x *gossipServiceDiscussGossipClient) Send(m *Gossip) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gossipServiceDiscussGossipClient) Recv() (*Gossip, error) {
	m := new(Gossip)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GossipServiceServer is the server API for GossipService service.
// All implementations must embed UnimplementedGossipServiceServer
// for forward compatibility
type GossipServiceServer interface {
	DiscussGossip(GossipService_DiscussGossipServer) error
	mustEmbedUnimplementedGossipServiceServer()
}

// UnimplementedGossipServiceServer must be embedded to have forward compatible implementations.
type UnimplementedGossipServiceServer struct {
}

func (UnimplementedGossipServiceServer) DiscussGossip(GossipService_DiscussGossipServer) error {
	return status.Errorf(codes.Unimplemented, "method DiscussGossip not implemented")
}
func (UnimplementedGossipServiceServer) mustEmbedUnimplementedGossipServiceServer() {}

// UnsafeGossipServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GossipServiceServer will
// result in compilation errors.
type UnsafeGossipServiceServer interface {
	mustEmbedUnimplementedGossipServiceServer()
}

func RegisterGossipServiceServer(s grpc.ServiceRegistrar, srv GossipServiceServer) {
	s.RegisterService(&GossipService_ServiceDesc, srv)
}

func _GossipService_DiscussGossip_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GossipServiceServer).DiscussGossip(&gossipServiceDiscussGossipServer{stream})
}

type GossipService_DiscussGossipServer interface {
	Send(*Gossip) error
	Recv() (*Gossip, error)
	grpc.ServerStream
}

type gossipServiceDiscussGossipServer struct {
	grpc.ServerStream
}

func (x *gossipServiceDiscussGossipServer) Send(m *Gossip) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gossipServiceDiscussGossipServer) Recv() (*Gossip, error) {
	m := new(Gossip)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GossipService_ServiceDesc is the grpc.ServiceDesc for GossipService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GossipService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gossip.GossipService",
	HandlerType: (*GossipServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "DiscussGossip",
			Handler:       _GossipService_DiscussGossip_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "proto/gossip.proto",
}
